# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("data/TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
dim(datos) # Vemos la dimension
head(datos,5) # Mostramos toda la info de los 5 primeros
tail(datos) # Consultamos los últimos datos
datos <- datos
colnames(datos)
colnames(datos) <- sapply(colnames(datos), tolower)
colnames
colnames(datos)
sapply(datos, class)
# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
colnames(datos) <- sapply(colnames(datos), tolower)
colnames(datos)
colnames(datos) <- gsub("\\.", "_", colnames(datos))
colnames(datos)
#### 1.3 Quitar tildes
colnames(datos) <- iconv(colnames(datos), to='ASCII//TRANSLIT')
colnames(datos)
#### 1.4. Renombrar manualmente las columnas con nombres más largos
colnames(datos)[12] <- "numero_plazas"
colnames(datos)[13] <- "fecha_inicio_prestacion"
colnames(datos)[15] <- "regimen_eurotaxi"
colnames(datos)[16] <- "fecha_inicio_eurotaxi"
colnames(datos)[17] <- "fecha_fin_eurotaxi"
colnames(datos)
sapply(datos, class)
# codigo: int -> character
datos$codigo <- as.character(datos$codigo)
# codigo: int -> character
datos$codigo <- as.character(datos$codigo)
sapply(datos$codigo, class)
# fecha_matriculacion: character -> date
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz= "CEST", format="%d/%m/%Y")
datos$fecha_matriculacion
# clasificacion_medioambiental: character -> category
datos$clasificacion_medioambiental <- as.ordered(datos$clasificacion_medioambiental)
# fecha inicio: character -> date
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "CEST", format="%d/%m/%Y")
datos$fecha_inicio_prestacion
# eurotaxi y regimen_eurotaxi: cambiar 'si' y 'no' a '0' y '1'
datos$eurotaxi[datos$eurotaxi == "SI"] <- 1
datos$eurotaxi[datos$eurotaxi == "NO"] <- 0
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "SI"] <- 1
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "NO"] <- 0
# Eliminamos columnas que consideramos innecesarias para nuestro trabajo
datos$Tipo <- NULL
datos$Variante <- NULL
datos$Fecha <- NULL
datos$Fecha.inicio.Regimen.Especial.Eurotaxi <- NULL
datos$Fecha.fin.Regimen.Especial.Eurotaxi <- NULL
#Comprobamos los tipos de las columnas
sapply(datos, class)
sys.> Sys.setenv(TZ="Europe/Berlin")
Sys.setenv(TZ="Europe/Berlin")
Sys.getenv("TZ")
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz=getOption("tz"), format="%d/%m/%Y")
datos$fecha_matriculacion
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz=getOption("tz"), format="%d/%m/%Y")
datos$fecha_matriculacion
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz=getOption("tz"), format="%d/%m/%Y")
datos$fecha_matriculacion
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz="CST6CDT", format="%d/%m/%Y")
datos$fecha_matriculacion
> as.POSIXct(t, tz=getOption("tz"))
?Sys.timezone
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio del servicio",
col = "red"
)
library (ggplot2)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio del servicio",
col = "red"
)
qplot(datos$fecha_inicio_prestacion, datos$fecha_matriculacion)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio del servicio",
col = "red"
)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio de la actividad",
col = "red"
main = "correlacion"
)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio de la actividad",
col = "red",
main = "correlacion"
)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio de la actividad",
col = "red",
main = "Relación entre fecha de matriculación e inicio de la actividad"
)
# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
dim(datos) # Vemos la dimension
head(datos,5) # Mostramos toda la info de los 5 primeros
tail(datos) # Consultamos los últimos datos
colnames(datos) <- sapply(colnames(datos), tolower)
colnames(datos)
colnames(datos) <- gsub("\\.", "_", colnames(datos))
colnames(datos)
#### 1.3 Quitar tildes
colnames(datos) <- iconv(colnames(datos), to='ASCII//TRANSLIT')
colnames(datos)
#### 1.4. Renombrar manualmente las columnas con nombres más largos
colnames(datos)[12] <- "numero_plazas"
colnames(datos)[13] <- "fecha_inicio_prestacion"
colnames(datos)[15] <- "regimen_eurotaxi"
colnames(datos)[16] <- "fecha_inicio_eurotaxi"
colnames(datos)[17] <- "fecha_fin_eurotaxi"
colnames(datos)
sapply(datos, class)
# codigo: int -> character
datos$codigo <- as.character(datos$codigo)
sapply(datos$codigo, class)
# fecha_matriculacion: character -> date
datos$fecha_matriculacion <- strptime(datos$fecha_matriculacion, "%d/%m/%Y")
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "", format="%d/%m/%Y")
datos$fecha_matriculacion
# fecha inicio: character -> date
datos$fecha_inicio_prestacion <- strptime(datos$fecha_inicio_prestacion, "%d/%m/%Y")
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "", format="%d/%m/%Y")
datos$fecha_inicio_prestacion
# Evolución de los taxis matriculados cada año
hist(datos$fecha_matriculacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "lightskyblue2",
xlab = "Fecha de matriculación",
ylab = "Num vehiculos",
main = "Taxis matriculados por año")
# Evolución del inicio del servicio de taxis por año
hist(datos$fecha_inicio_prestacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "seagreen3",
xlab = "Fecha de inicio de servicio",
ylab = "Num vehiculos",
main = " Inicio actividad taxis por año")
## 1. Obtención de los datos
# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
dim(datos) # Vemos la dimension
head(datos,5) # Mostramos toda la info de los 5 primeros
tail(datos) # Consultamos los últimos datos
## 2. Tratamiento y limpieza
### 1. Renombrar los nombres de las columnas
#### 1.1 Cambiar los títulos a minúsculas
colnames(datos) <- sapply(colnames(datos), tolower)
colnames(datos)
#### 1.2 Sustituir los espacios por "_"
colnames(datos) <- gsub("\\.", "_", colnames(datos))
colnames(datos)
#### 1.3 Quitar tildes
colnames(datos) <- iconv(colnames(datos), to='ASCII//TRANSLIT')
colnames(datos)
#### 1.4. Renombrar manualmente las columnas con nombres más largos
colnames(datos)[12] <- "numero_plazas"
colnames(datos)[13] <- "fecha_inicio_prestacion"
colnames(datos)[15] <- "regimen_eurotaxi"
colnames(datos)[16] <- "fecha_inicio_eurotaxi"
colnames(datos)[17] <- "fecha_fin_eurotaxi"
colnames(datos)
### 2. Convertir las variables a los tipos correspondientes
#### 2.1 Inspeccionar el tipo de variables
sapply(datos, class)
#### 2.2 Identificar las variables a cambiar:
# codigo: int -> character
datos$codigo <- as.character(datos$codigo)
sapply(datos$codigo, class)
# fecha_matriculacion: character -> date
datos$fecha_matriculacion <- strptime(datos$fecha_matriculacion, "%d/%m/%Y")
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "", format="%d/%m/%Y")
datos$fecha_matriculacion
# clasificacion_medioambiental: character -> category
datos$clasificacion_medioambiental <- as.ordered(datos$clasificacion_medioambiental)
# fecha inicio: character -> date
datos$fecha_inicio_prestacion <- strptime(datos$fecha_inicio_prestacion, "%d/%m/%Y")
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "", format="%d/%m/%Y")
datos$fecha_inicio_prestacion
# eurotaxi y regimen_eurotaxi: cambiar 'si' y 'no' a '0' y '1'
datos$eurotaxi[datos$eurotaxi == "SI"] <- 1
datos$eurotaxi[datos$eurotaxi == "NO"] <- 0
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "SI"] <- 1
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "NO"] <- 0
# Eliminamos columnas que consideramos innecesarias para nuestro trabajo
datos$Tipo <- NULL
datos$Variante <- NULL
datos$Fecha <- NULL
datos$Fecha.inicio.Regimen.Especial.Eurotaxi <- NULL
datos$Fecha.fin.Regimen.Especial.Eurotaxi <- NULL
# Comprobamos los tipos de las columnas
sapply(datos, class)
# 4. Análisis exploratorio
# Evolución de los taxis matriculados cada año
hist(datos$fecha_matriculacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "lightskyblue2",
xlab = "Fecha de matriculación",
ylab = "Num vehiculos",
main = "Taxis matriculados por año")
# Evolución del inicio del servicio de taxis por año
hist(datos$fecha_inicio_prestacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "seagreen3",
xlab = "Fecha de inicio de servicio",
ylab = "Num vehiculos",
main = " Inicio actividad taxis por año")
# Relación entre la fecha de matriculación y la fecha de inicio de la actividad de taxis
library (ggplot2)
qplot(datos$fecha_matriculacion, datos$fecha_inicio_prestacion,
xlab = "Fecha de matriculación",
ylab = "Fecha de inicio de la actividad",
col = "red",
main = "Relación entre fecha de matriculación e inicio de la actividad"
)
# Relación entre potencia y cilindrada según clasificación medioambiental
# Se ve una relación directa entre potencia y cilindrada y según estas variables tengan valores más bajos,
# el nivel de contaminación es menor.
# No se puede asumir una relación directa entre los coches con nivel de contaminación 0, una vez que el número de casos
# que asume este valor es muy reducido y no se pueden sacar conclusiones.
ggplot(datos, aes(x = cilindrada, y = potencia, colour = clasificacion_medioambiental)) + geom_point()
# Evolución entre tipo de combustible y nivel de contaminación
# Los coches de contaminación 0 son exclusivamente elétricos
# Los coches de contaminación B y C son principalmente a Diesel y han aumentado en los últimos años.
# Hay también coches de contaminación de nivel C de gasolina transformada, que aumentaron a lo largo del tiempo y empezaron en caída
# Los coches eco son de gasolina - electricidad, que ha sido constante en los últimos años, gasolina - fás natural, que han bajado en los últimos años
# y GLP/Gasolina que se han mantenido estables también a lo largo del tiempo.
tmp <- datos[datos$clasificacion_medioambiental %in% c('0', 'ECO', 'B', 'C'),]
ggplot(tmp, aes(x= fecha_inicio_prestacion, y= cilindrada)) +
geom_point() + geom_smooth() +
facet_grid(clasificacion_medioambiental ~ combustible)
#graph=plot_ly(x= s)
datos[datos$Combustible == "DIESEL",] # Nos devuelve todos los taxis cuyo combustible es DIESEL
plot(datos$Combustible , datos$Marca)
head(datos[datos$NÃºmero.de.Plazas > 5 & datos$Clasificación.medioambiental == "ECO",],5)
hist(datos$Potencia)
table(table(datos$Matricula)) # Contamos las frecuencias de Código # Para ver duplicados
# Importación de la base de datos *Taxi Flota* de la base de datos abiertos de Madrid, en formato .csv
datos <- read.table("TaxiFlota.csv", sep = ";", header = TRUE, stringsAsFactors = FALSE )
dim(datos) # Vemos la dimension
head(datos,5) # Mostramos toda la info de los 5 primeros
tail(datos) # Consultamos los últimos datos
colnames(datos) <- sapply(colnames(datos), tolower)
colnames(datos)
colnames(datos) <- gsub("\\.", "_", colnames(datos))
colnames(datos)
#### 1.3 Quitar tildes
colnames(datos) <- iconv(colnames(datos), to='ASCII//TRANSLIT')
colnames(datos)
#### 1.4. Renombrar manualmente las columnas con nombres más largos
colnames(datos)[12] <- "numero_plazas"
colnames(datos)[13] <- "fecha_inicio_prestacion"
colnames(datos)[15] <- "regimen_eurotaxi"
colnames(datos)[16] <- "fecha_inicio_eurotaxi"
colnames(datos)[17] <- "fecha_fin_eurotaxi"
colnames(datos)
sapply(datos, class)
# codigo: int -> character
datos$codigo <- as.character(datos$codigo)
sapply(datos$codigo, class)
# fecha_matriculacion: character -> date
datos$fecha_matriculacion <- strptime(datos$fecha_matriculacion, "%d/%m/%Y")
datos$fecha_matriculacion <- as.POSIXct(datos$fecha_matriculacion, tz= "", format="%d/%m/%Y")
datos$fecha_matriculacion
# clasificacion_medioambiental: character -> category
datos$clasificacion_medioambiental <- as.ordered(datos$clasificacion_medioambiental)
# fecha inicio: character -> date
datos$fecha_inicio_prestacion <- strptime(datos$fecha_inicio_prestacion, "%d/%m/%Y")
datos$fecha_inicio_prestacion <- as.POSIXct(datos$fecha_inicio_prestacion, tz= "", format="%d/%m/%Y")
datos$fecha_inicio_prestacion
# eurotaxi y regimen_eurotaxi: cambiar 'si' y 'no' a '0' y '1'
datos$eurotaxi[datos$eurotaxi == "SI"] <- 1
datos$eurotaxi[datos$eurotaxi == "NO"] <- 0
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "SI"] <- 1
datos$regimen_eurotaxi[datos$regimen_eurotaxi == "NO"] <- 0
# Eliminamos columnas que consideramos innecesarias para nuestro trabajo
datos$Tipo <- NULL
datos$Variante <- NULL
datos$Fecha <- NULL
datos$Fecha.inicio.Regimen.Especial.Eurotaxi <- NULL
datos$Fecha.fin.Regimen.Especial.Eurotaxi <- NULL
# Comprobamos los tipos de las columnas
sapply(datos, class)
# Evolución de los taxis matriculados cada año
hist(datos$fecha_matriculacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "lightskyblue2",
xlab = "Fecha de matriculación",
ylab = "Num vehiculos",
main = "Taxis matriculados por año")
# Evolución del inicio del servicio de taxis por año
hist(datos$fecha_inicio_prestacion,
breaks = "years",
format = "%Y",
freq = TRUE,
las = 2,
col = "seagreen3",
xlab = "Fecha de inicio de servicio",
ylab = "Num vehiculos",
main = " Inicio actividad taxis por año")
library (ggplot2)
ggplot(datos, aes(x = cilindrada, y = potencia, colour = clasificacion_medioambiental)) + geom_point()
ggplot(datos, aes(x = cilindrada, y = potencia, colour = clasificacion_medioambiental)) +
geom_point() + limits= c(0,4000)
ggplot(datos, aes(x = cilindrada, y = potencia, colour = clasificacion_medioambiental)) + geom_point() + limits= c(0,4000)
ggplot(datos, aes(x = cilindrada, y = potencia, colour = clasificacion_medioambiental)) + geom_point() + limits = c(0,4000)
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colours = clasificacion_medioambiental)) +
geom_point() +
scale_y_continuous(limits=c(0,4000)) +
geom_smooth(method="lm")
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colours = clasificacion_medioambiental)) +
geom_point() +
scale_x_continuous(limits=c(0,4000)) +
geom_smooth(method="lm")
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point() +
scale_x_continuous(limits=c(0,4000)) +
geom_smooth(method="lm")
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point() +
scale_x_continuous(limits=c(0,4000)) +
geom_smooth(method="lm")
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point() +
coord_cartesian(xlim=c(0,4000)) +
geom_smooth(method="lm")
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point() +
coord_cartesian(xlim=c(0,4000))
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point() +
coord_cartesian(xlim=c(0,4000))
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
coord_cartesian(xlim=c(0,4000))
# Relación entre potencia y cilindrada según clasificación medioambiental
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental)) +
coord_cartesian(xlim=c(0,4000))
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia == ""] <- 0
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental)) +
coord_cartesian(xlim=c(0,4000))
datos$potencia
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia == NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia == NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia = NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia IS NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia is NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[datos$potencia NULL] <- 0
# Relación entre potencia y cilindrada según clasificación medioambiental
datos$potencia[is.na(datos$potencia)] <- 0
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental)) +
coord_cartesian(xlim=c(0,4000))
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) + geom_point(aes(size = clasificacion_medioambiental))
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental))
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental))
ggplot(datos, aes(x = cilindrada, y =potencia, colour = clasificacion_medioambiental)) +
geom_point(aes(size = clasificacion_medioambiental))
